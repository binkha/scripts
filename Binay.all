#!/bin/bash

set -e
clear

echo "This scrip will give us enviroment information"
echo "=============================================="
echo ""
echo "Hello Username: $USER"
echo ""
echo "Your Home Directory is: $USER"
echo ""
echo "Your History File will Ignore: $PATH"
echo ""
echo "Your Termainal Session Type is: $TERM"
echo ""

#!bin/bash
#we can set the enviromental variables by ourself and use those variables on our script. Already set variables cannot be reassigned.
#if we set our enviromental variables and want to  reassigned new variables we can set again because it will overlap

#!/bin/bash

set -e

echo "The Current path is : $PATH"

MYUSERNAME="Binay Kharel"
MYPASSWORD="Checkit"
STARTOFSCRIPT=`date`

echo "My login name for this application is: $MYUSERNAME"
echo "MY login password for the application is: $MYPASSWORD"
echo "My started this script at : $STARTOFSCRIPT"

ENDOFSCRIPT=`date`

echo "I ended this script at: $ENDOFSCRIPT"
#!/bin/bash

#redirect to /dev/null example

echo "This is displaying on the console"

echo "This is going into the black hole">>/dev/null
#!/bin/bash

set -e

expr 1 + 5
echo $?

rm doodles.sh
echo $?

expr 10 + 10
echo $?
#!/bin/bash

set -e

expr 2 + 2

expr 2+2/*4

expr \(2+2\)*4
#!/bin/bash

#simple substitution

shopt -s expand_aliases

alias TODAY="date"
alias UFILES="find /root/sciptsLinux"

TODAYSDATE=`date`
USERFILES="find /root/sciptsLinux"

echo "Today's date: $TODAYSDATE"
echo "All files owned by USER:$USERFILES"

A=`TODAY`
B=`UFILES`

echo "With Alias, Today is $A"
echo "With Alias, UFILES is $B"
#!/bin/bash
#interactive script for user input

echo "Enter Your First Name: "
read FirstName
echo "Enter Your Last Name: "
read LastName

echo ""
echo "Your Full Name is: $FirstName $LastName"
echo ""
echo "Enter Your Age: "
read Userage

echo "In ten years you will be `expr $Userage + 10` years old."
#!/bin/bash/

echo `sh{ot,ort,oot}`
echo `st{il,al}l`
#!/bin/bash
# Simple arry list and loop for display

serverlist=("webser01" "webser02" "webser03" "webser04")
count=0

for index in ${serverlist[@]}; do #@is the special char in array tell as many as in array
 echo "Processing Server : ${serverlist[count]}"
 count="` expr $count + 1 `"
done
#!/bin/bash
#demo of command line values passed in our shell script

set -e


#echo "the following item was passed in to the script at run time $1 $2"

username=$1
password=$2
echo "The following username $username and password is $password"
#!/bin/bash
set -e

#simple if script if script for guessing a number

echo "Guess the secret number"
echo "======================"
echo ""
echo "Enter a number Between 1 and 5: "
read Guess

if [ $Guess = 3 ]
 then
  echo "You Guessed the correct number"
#else
#echo " Your guess is worng"
fi
#!/bin/bash
set -e
# test for existence of indicated file name

#Filename=$1
#echo "Testing for the existence of a file called $Filename"
#
#if [ -a $Filename ] 
#if we put ! before -a to get which does not exist
#  then
#   echo "File $Filename Does Indeed Exist!"
#fi
#
Filename=$1
echo "Testing for the non existence of a file called $Filename"

if [ ! -a $Filename ]
#if we put ! before -a to get which does not exist
  then
   echo "File $Filename Doesn't Indeed Exist!"
fi

#!/bin/bash
#test multiple expression in single if statement

Filename=$1

echo "Testing for file $Filename and readability"

if [ -f $Filename ] && [ -r $Filename ]
 then
  echo "File $Filename exists And is readable"
fi
#!/bin/bash
set -e

#simple example of if then else and nested if statement

echo "Enter a number between 1 and 3:"

read Value

if [ "$Value" = 1 ] 2>/dev/null || [ "$Value" = 2 ] 2>/dev/nill || [ "$Value" = 3 ] 2>/dev/null; then
  echo "You entered $Value"
else
 echo "You did not follow the direction"
fi
#!/bin/bash
set -e

#simple example of if then else and nested if statement

echo "Enter a number between 1 and 3:"

read Value

if [ "$Value" = 1 ] 2>/dev/null; then
 echo "You entered #1"
elif [ "$Value" = 2 ] 2>/dev/null; then
 echo "You entered #2"
elif [ "$Value" = 3 ] 2>/dev/devnull; then
 echo "You entered the 3rd number"
else
 echo "You did not follow the direction"
fi
#!/bin/bash
# this is a demo of the for loop

echo "List all the shell scripts of the directory"

Shellscripts=`ls `
#echo "listing is the $Shellscripts"

for ForLoop in "$Shellscripts";do
 Display="`cat $ForLoop`"
 echo " File: $8Forloop - contents  $Display"
done
#echo "listing is the $Shellscripts"
#!/bin/bash
#demo of the case statement

echo "Main Menu"
echo "========="
echo "1) Choice One"
echo "2) Choice Two"
echo "3) Choice Three"
echo ""
echo "Enter Choice"
read Menuchoice

case $Menuchoice in
1)
 echo "Congratulation for Choosing the First Option";;
2)
 echo "Choice 2 Chosen";;
3)
 echo "Last choice made";;
*)
 echo "You choose unwisely";;
esac
#!/bin/bash
#while loop example

echo "Enter the number of times to displat the 'Hello World' message"
read Displaynumber

Count=1

while [ $Count -le $Displaynumber ]
do
	echo "Hello World - $Count"
	Count="`expr $Count + 1`"
done
#!/bin/bash
#execution operatiors examples

echo "Enter a number between 1 and 5"
read Value

if [ "$Value" -eq "1" ] || [ "$Value" -eq "3" ] || [ "$Value" -eq "5" ]; then
 echo "You entered the ODD value of $Value"
else
 echo "You entered a value of $Value"
fi

#!/bin/bash
# simple file reading (non-binary) and displaying one line at a time

echo "Enter a filename to read: "
read FILE

while read -r Names;
do
 echo "My Family Name: $Names"
done < "$FILE"
#!/bin/bash
#demo of reading and writing to a file using file descriptor

echo "Enter a file name to read: "
read File

exec 5<>$File
#>is for write only <is for read only <>is for read and write

while read -r Name;
do
 echo "Family Name: $Name"
done <&5

echo "File was read on: `date`">&5

exec 5>&-
#!/bin/bash
#doing delimiter example using IFS

echo "Enter filename to parse: "
read File

echo "Enter the Delimiter: "
read Delim

IFS="$Delim"

while read -r CPU MEMORY DISK;
do
 echo "CPU: $CPU"
 echo "Memory: $MEMORY"
 echo "Disk: $DISK"
done <"$File"
#!/bin/bash
#example of trapping events and limiting the shell stopping

clear

trap 'echo " - Please Press Q to Exit.."' SIGINT SIGTERM SIGTSTP

while [ "$Choice" != "Q" ] && [ "$Choice" != "q" ];do

 echo "Main Menu"
 echo "========="
 echo "1) Choice One"
 echo "2) Choice Two"
 echo "3) Choice Three"
 echo "Q) Quit/Exit"
 echo ""
 echo "Enter Choice"
 read Choice

clear
done


#clear
#done
#!/bin/bash
#demo of using erroe handing with exit

echo "Change to a directory and list the contents"
Directory=$1

cd $Directory 2>/dev/null

if [ "$?" = "0" ]; then
 echo "We can change into the directory $Directory, and here are the contents"
 echo "`ls -al`"
else
 echo "Cannot change directories, exiting with an error and no listing"
 exit 111
fi
Ramjee Kharel
Subhadra Kharel
Rajan Raj Upreti
Bina Kharel
Bimal Kharel
Nita Kharel
Binay Kharel
Aryashree Poudyal Kharel
Biraj Upreti
Renisha Upreti
Kritika Kharel
Abhiraj Kharel
Abha Kharel
File was read on: Wed Jun 20 10:01:56 EDT 2018
List all the shell scripts of the directory
 File: Forloop - contents  #!/bin/bash

set -e
clear

echo "This scrip will give us enviroment information"
echo "=============================================="
echo ""
echo "Hello Username: $USER"
echo ""
echo "Your Home Directory is: $USER"
echo ""
echo "Your History File will Ignore: $PATH"
echo ""
echo "Your Termainal Session Type is: $TERM"
echo ""

#!bin/bash
#we can set the enviromental variables by ourself and use those variables on our script. Already set variables cannot be reassigned.
#if we set our enviromental variables and want to  reassigned new variables we can set again because it will overlap

#!/bin/bash

set -e

echo "The Current path is : $PATH"

MYUSERNAME="Binay Kharel"
MYPASSWORD="Checkit"
STARTOFSCRIPT=`date`

echo "My login name for this application is: $MYUSERNAME"
echo "MY login password for the application is: $MYPASSWORD"
echo "My started this script at : $STARTOFSCRIPT"

ENDOFSCRIPT=`date`

echo "I ended this script at: $ENDOFSCRIPT"
#!/bin/bash

#redirect to /dev/null example

echo "This is displaying on the console"

echo "This is going into the black hole">>/dev/null
#!/bin/bash

set -e

expr 1 + 5
echo $?

rm doodles.sh
echo $?

expr 10 + 10
echo $?
#!/bin/bash

set -e

expr 2 + 2

expr 2+2/*4

expr \(2+2\)*4
#!/bin/bash

#simple substitution

shopt -s expand_aliases

alias TODAY="date"
alias UFILES="find /root/sciptsLinux"

TODAYSDATE=`date`
USERFILES="find /root/sciptsLinux"

echo "Today's date: $TODAYSDATE"
echo "All files owned by USER:$USERFILES"

A=`TODAY`
B=`UFILES`

echo "With Alias, Today is $A"
echo "With Alias, UFILES is $B"
#!/bin/bash
#interactive script for user input

echo "Enter Your First Name: "
read FirstName
echo "Enter Your Last Name: "
read LastName

echo ""
echo "Your Full Name is: $FirstName $LastName"
echo ""
echo "Enter Your Age: "
read Userage

echo "In ten years you will be `expr $Userage + 10` years old."
#!/bin/bash/

echo `sh{ot,ort,oot}`
echo `st{il,al}l`
#!/bin/bash
# Simple arry list and loop for display

serverlist=("webser01" "webser02" "webser03" "webser04")
count=0

for index in ${serverlist[@]}; do #@is the special char in array tell as many as in array
 echo "Processing Server : ${serverlist[count]}"
 count="` expr $count + 1 `"
done
#!/bin/bash
#demo of command line values passed in our shell script

set -e


#echo "the following item was passed in to the script at run time $1 $2"

username=$1
password=$2
echo "The following username $username and password is $password"
#!/bin/bash
set -e

#simple if script if script for guessing a number

echo "Guess the secret number"
echo "======================"
echo ""
echo "Enter a number Between 1 and 5: "
read Guess

if [ $Guess = 3 ]
 then
  echo "You Guessed the correct number"
#else
#echo " Your guess is worng"
fi
#!/bin/bash
set -e
# test for existence of indicated file name

#Filename=$1
#echo "Testing for the existence of a file called $Filename"
#
#if [ -a $Filename ] 
#if we put ! before -a to get which does not exist
#  then
#   echo "File $Filename Does Indeed Exist!"
#fi
#
Filename=$1
echo "Testing for the non existence of a file called $Filename"

if [ ! -a $Filename ]
#if we put ! before -a to get which does not exist
  then
   echo "File $Filename Doesn't Indeed Exist!"
fi

#!/bin/bash
#test multiple expression in single if statement

Filename=$1

echo "Testing for file $Filename and readability"

if [ -f $Filename ] && [ -r $Filename ]
 then
  echo "File $Filename exists And is readable"
fi
#!/bin/bash
set -e

#simple example of if then else and nested if statement

echo "Enter a number between 1 and 3:"

read Value

if [ "$Value" = 1 ] 2>/dev/null || [ "$Value" = 2 ] 2>/dev/nill || [ "$Value" = 3 ] 2>/dev/null; then
  echo "You entered $Value"
else
 echo "You did not follow the direction"
fi
#!/bin/bash
set -e

#simple example of if then else and nested if statement

echo "Enter a number between 1 and 3:"

read Value

if [ "$Value" = 1 ] 2>/dev/null; then
 echo "You entered #1"
elif [ "$Value" = 2 ] 2>/dev/null; then
 echo "You entered #2"
elif [ "$Value" = 3 ] 2>/dev/devnull; then
 echo "You entered the 3rd number"
else
 echo "You did not follow the direction"
fi
#!/bin/bash
# this is a demo of the for loop

echo "List all the shell scripts of the directory"

Shellscripts=`ls `
#echo "listing is the $Shellscripts"

for ForLoop in "$Shellscripts";do
 Display="`cat $ForLoop`"
 echo " File: $8Forloop - contents  $Display"
done
#echo "listing is the $Shellscripts"
List all the shell scripts of the directory
i7 4Ghz;32Gb;4TB
